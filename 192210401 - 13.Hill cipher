#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_SIZE 100

// Function to encrypt using Hill cipher
void hillEncrypt(int key[][3], int plaintext[], int n) {
    int ciphertext[MAX_SIZE] = {0};
    int i, j;

    // Perform matrix multiplication
    for (i = 0; i < n; i++) {
        for (j = 0; j < 3; j++) {
            ciphertext[i] += key[i][j] * plaintext[j];
        }
        ciphertext[i] %= 26; // Assuming modulo 26 for simplicity (for letters)
    }

    // Print ciphertext
    printf("Ciphertext: ");
    for (i = 0; i < n; i++) {
        printf("%c", ciphertext[i] + 'A'); // Convert to character (for letters)
    }
    printf("\n");
}

// Function to decrypt using Hill cipher
void hillDecrypt(int key[][3], int ciphertext[], int n) {
    int plaintext[MAX_SIZE] = {0};
    int i, j;

    // Find the determinant of key matrix
    int det = key[0][0] * (key[1][1] * key[2][2] - key[1][2] * key[2][1])
            - key[0][1] * (key[1][0] * key[2][2] - key[1][2] * key[2][0])
            + key[0][2] * (key[1][0] * key[2][1] - key[1][1] * key[2][0]);

    // Find multiplicative inverse modulo 26
    int det_inv = 0;
    for (i = 1; i < 26; i++) {
        if ((det * i) % 26 == 1) {
            det_inv = i;
            break;
        }
    }

    // Find adjugate matrix
    int adj[3][3];
    adj[0][0] = (key[1][1] * key[2][2] - key[1][2] * key[2][1]);
    adj[0][1] = -(key[1][0] * key[2][2] - key[1][2] * key[2][0]);
    adj[0][2] = (key[1][0] * key[2][1] - key[1][1] * key[2][0]);
    adj[1][0] = -(key[0][1] * key[2][2] - key[0][2] * key[2][1]);
    adj[1][1] = (key[0][0] * key[2][2] - key[0][2] * key[2][0]);
    adj[1][2] = -(key[0][0] * key[2][1] - key[0][1] * key[2][0]);
    adj[2][0] = (key[0][1] * key[1][2] - key[0][2] * key[1][1]);
    adj[2][1] = -(key[0][0] * key[1][2] - key[0][2] * key[1][0]);
    adj[2][2] = (key[0][0] * key[1][1] - key[0][1] * key[1][0]);

    // Calculate inverse matrix
    int key_inv[3][3];
    for (i = 0; i < 3; i++) {
        for (j = 0; j < 3; j++) {
            key_inv[i][j] = (adj[j][i] * det_inv) % 26;
            if (key_inv[i][j] < 0) {
                key_inv[i][j] += 26;
            }
        }
    }

    // Perform matrix multiplication to decrypt
    for (i = 0; i < n; i++) {
        for (j = 0; j < 3; j++) {
            plaintext[i] += key_inv[i][j] * ciphertext[j];
        }
        plaintext[i] %= 26; // Assuming modulo 26 for simplicity (for letters)
    }

    // Print plaintext
    printf("Decrypted Plaintext: ");
    for (i = 0; i < n; i++) {
        printf("%c", plaintext[i] + 'A'); // Convert to character (for letters)
    }
    printf("\n");
}

int main() {
    int key[3][3] = {{6, 24, 1}, {13, 16, 10}, {20, 17, 15}}; // Example key matrix
    int plaintext[3] = {2, 0, 1}; // Example plaintext as numbers (for 'C', 'A', 'B')
    int ciphertext[3] = {7, 15, 9}; // Example ciphertext as numbers (for 'H', 'P', 'J')

    // Encrypt using Hill cipher
    hillEncrypt(key, plaintext, 3);

    // Decrypt using Hill cipher
    hillDecrypt(key, ciphertext, 3);

    return 0;
}

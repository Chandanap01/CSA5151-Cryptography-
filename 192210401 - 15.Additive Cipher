#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#define ALPHABET_SIZE 26
const double englishLetterFreq[ALPHABET_SIZE] = {
    8.167, 1.492, 2.782, 4.253, 12.702, 2.228, 2.015, 6.094,
    6.966, 0.153, 0.772, 4.025, 2.406, 6.749, 7.507, 1.929,
    0.095, 5.987, 6.327, 9.056, 2.758, 0.978, 2.360, 0.150,
    1.974, 0.074
};
void decrypt(const char *ciphertext, char *plaintext, int key) {
    for (int i = 0; ciphertext[i]; i++) {
        if (isalpha(ciphertext[i])) {
            char offset = isupper(ciphertext[i]) ? 'A' : 'a';
            plaintext[i] = ((ciphertext[i] - offset - key + ALPHABET_SIZE) % ALPHABET_SIZE) + offset;
        } else {
            plaintext[i] = ciphertext[i];
        }
    }
}
double calculateScore(const char *plaintext) {
    int letterCounts[ALPHABET_SIZE] = {0};
    int totalLetters = 0;
    double score = 0.0;

    for (int i = 0; plaintext[i]; i++) {
        if (isalpha(plaintext[i])) {
            letterCounts[toupper(plaintext[i]) - 'A']++;
            totalLetters++;
        }
    }
    for (int i = 0; i < ALPHABET_SIZE; i++) {
        if (totalLetters > 0) {
            double frequency = (double)letterCounts[i] / totalLetters * 100;
            score += frequency * englishLetterFreq[i];
        }
    }
    return score;
}
typedef struct {
    char plaintext[1024];
    double score;
} DecryptionResult;
int compare(const void *a, const void *b) {
    return ((DecryptionResult*)b)->score - ((DecryptionResult*)a)->score;
}
int main() {
    char ciphertext[1024];
    int topN;
    printf("Enter the ciphertext: ");
    fgets(ciphertext, sizeof(ciphertext), stdin);
    ciphertext[strcspn(ciphertext, "\n")] = '\0';
    printf("Enter the number of top plaintexts to display: ");
    scanf("%d", &topN);
    DecryptionResult results[ALPHABET_SIZE];
    for (int key = 0; key < ALPHABET_SIZE; key++) {
        decrypt(ciphertext, results[key].plaintext, key);
        results[key].score = calculateScore(results[key].plaintext);
    }
    qsort(results, ALPHABET_SIZE, sizeof(DecryptionResult), compare);
    printf("Top %d possible plaintexts:\n", topN);
    for (int i = 0; i < topN && i < ALPHABET_SIZE; i++) {
        printf("%2d. %s (Score: %.2f)\n", i + 1, results[i].plaintext, results[i].score);
    }
    return 0;
}
